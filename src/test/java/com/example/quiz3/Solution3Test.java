package com.example.quiz3;

import org.junit.Test;
import org.junit.Assert;

public class Solution3Test {
    private final String SEP = ",";

    @Test
    public void test1() {

        int[] arr = {28, 79, 91};

        Solution3 pq = new Solution3(arr.length);
        for(int i : arr){
            pq.insert(i);
        }

        int[] expects = {91, 79, 28};
        for(int i = 0; i < arr.length; i++) Assert.assertEquals(expects[i], pq.delMax());
    }

    @Test
    public void test2() {

        int[] arr = {91, 28, 79, 10, 16, 83, 13, 7, 44, 39, 70, 92, 6, 31};

        Solution3 pq = new Solution3(arr.length);
        for(int i : arr){
            pq.insert(i);
        }

        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()){
            sb.append(pq.delMax()).append(SEP);
        }
        sb.deleteCharAt(sb.length() - 1);

        String expect = "92,91,83,79,70,44,39,31,28,16,13,10,7,6";
        Assert.assertEquals(expect, sb.toString());
    }

    @Test
    public void test3(){
        int[] arr = {28, 53, 36, 66, 78, 48, 15, 28, 98, 54, 85, 31, 43, 92, 65, 67};

        Solution3 pq = new Solution3(arr.length);
        for(int i : arr){
            pq.insert(i);
        }

        int index = 1;
        int[] res = pq.getPq();
        while(index * 2 + 1 < pq.size()){
            Assert.assertTrue(res[index] >= res[index * 2] && res[index] >= res[index * 2 + 1]);
            index++;
        }

        for(int i = 0; i < pq.size() / 2; i++) pq.delMax();

        index = 1;
        while(index * 2 + 1 < pq.size()){
            Assert.assertTrue(res[index] > res[index * 2] && res[index] > res[index * 2 + 1]);
            index++;
        }
    }

    @Test
    public void test4() {
        int[] arr = {91, 28, 79, 10, 16, 83, 13, 7, 44, 39, 70, 92, 6, 31};

        Solution3 pq = new Solution3(arr.length);
        for(int i = 0; i < arr.length; i++){
            if(i % 2 == 0) pq.insert(arr[i]);
        }

        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()){
            sb.append(pq.delMax()).append(SEP);
        }
        sb.deleteCharAt(sb.length() - 1);
        String expect = "91,79,70,44,16,13,6";

        Assert.assertEquals(expect, sb.toString());

        for(int i = 0; i < arr.length; i++){
            if(i % 2 == 1) pq.insert(arr[i]);
        }

        sb = new StringBuilder();
        while (!pq.isEmpty()){
            sb.append(pq.delMax()).append(SEP);
        }
        sb.deleteCharAt(sb.length() - 1);
        expect = "92,83,39,31,28,10,7";

        Assert.assertEquals(expect, sb.toString());
    }

    @Test
    public void test5() {
        int[] arr = {};

        Solution3 pq = new Solution3(arr.length);
        for(int i = 0; i < arr.length; i++) pq.insert(arr[i]);

        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()){
            sb.append(pq.delMax()).append(SEP);
        }
        sb.deleteCharAt(sb.length() - 1);
        String expect = "9999,9989,9973,9971,9968,9952,9944,9931,9920,9913,9911,9909,9907,9906,9897,9883,9858,9853,9853,9845,9842,9815,9807,9771,9768,9764,9762,9748,9744,9737,9685,9679,9668,9624,9619,9606,9603,9589,9585,9575,9574,9574,9568,9540,9537,9514,9499,9491,9481,9478,9468,9456,9452,9444,9436,9425,9383,9379,9374,9362,9359,9351,9350,9350,9335,9331,9319,9305,9298,9285,9276,9270,9247,9246,9245,9239,9236,9235,9215,9212,9192,9191,9173,9140,9138,9120,9113,9090,9087,9068,9059,9056,9053,9025,9025,9012,9004,8998,8970,8966,8953,8951,8949,8941,8935,8934,8933,8917,8911,8906,8902,8887,8885,8865,8862,8861,8860,8852,8848,8824,8809,8802,8784,8762,8759,8756,8731,8711,8703,8694,8694,8685,8681,8652,8642,8642,8638,8626,8616,8613,8589,8578,8577,8560,8560,8556,8554,8552,8543,8489,8473,8472,8462,8461,8434,8428,8424,8415,8404,8402,8377,8373,8356,8343,8336,8336,8328,8303,8299,8281,8280,8276,8275,8275,8273,8255,8233,8225,8205,8200,8193,8185,8155,8145,8140,8130,8119,8112,8110,8103,8091,8077,8070,8063,8062,8058,8058,8055,8046,8042,8030,8013,7963,7956,7940,7934,7934,7920,7911,7899,7897,7885,7885,7880,7879,7855,7855,7850,7847,7839,7827,7814,7799,7791,7787,7773,7752,7749,7747,7729,7726,7723,7715,7715,7693,7688,7684,7671,7644,7618,7614,7603,7595,7581,7577,7575,7564,7555,7543,7534,7523,7522,7517,7489,7486,7437,7430,7429,7429,7428,7424,7422,7414,7411,7403,7394,7385,7379,7378,7375,7374,7368,7361,7359,7333,7294,7277,7275,7262,7262,7259,7259,7258,7258,7249,7230,7223,7220,7219,7215,7202,7184,7170,7160,7149,7142,7137,7126,7124,7121,7111,7094,7081,7072,7063,7029,7012,6993,6981,6957,6944,6940,6928,6919,6916,6908,6900,6887,6876,6874,6859,6853,6827,6825,6823,6808,6800,6776,6770,6750,6739,6734,6714,6708,6704,6703,6699,6699,6693,6691,6671,6670,6669,6665,6659,6634,6627,6623,6616,6616,6610,6605,6602,6589,6588,6586,6584,6583,6583,6571,6553,6538,6526,6517,6476,6468,6461,6451,6435,6431,6418,6405,6391,6382,6382,6358,6354,6350,6342,6335,6327,6324,6315,6314,6287,6262,6248,6244,6240,6239,6220,6218,6218,6210,6198,6164,6159,6151,6096,6091,6086,6069,6060,6034,6024,6023,6023,6021,6009,6002,5979,5967,5960,5951,5946,5944,5934,5933,5917,5912,5909,5894,5893,5866,5860,5847,5842,5821,5818,5801,5801,5796,5794,5785,5781,5776,5775,5775,5772,5748,5730,5729,5723,5720,5698,5695,5671,5666,5661,5657,5623,5599,5597,5563,5545,5531,5499,5498,5490,5451,5429,5426,5425,5421,5418,5410,5404,5394,5373,5363,5353,5352,5347,5325,5324,5312,5303,5303,5286,5280,5274,5268,5265,5261,5261,5259,5249,5215,5213,5211,5205,5190,5175,5173,5159,5156,5144,5132,5131,5119,5115,5101,5096,5094,5090,5089,5083,5074,4988,4986,4986,4983,4956,4951,4932,4930,4895,4893,4878,4863,4848,4821,4813,4798,4798,4782,4779,4752,4746,4744,4703,4682,4681,4681,4673,4673,4663,4658,4653,4646,4646,4644,4630,4606,4604,4581,4563,4546,4541,4508,4506,4495,4487,4470,4442,4435,4429,4418,4406,4393,4389,4379,4379,4378,4354,4343,4342,4333,4312,4295,4294,4268,4247,4243,4232,4230,4224,4219,4211,4211,4199,4180,4180,4176,4166,4163,4107,4096,4093,4082,4074,4053,4048,4047,4039,4025,4016,4003,3995,3994,3982,3961,3944,3942,3935,3933,3930,3918,3909,3908,3893,3893,3884,3877,3877,3876,3874,3868,3862,3851,3849,3838,3829,3828,3815,3803,3785,3780,3770,3770,3758,3756,3740,3717,3696,3688,3685,3681,3680,3642,3632,3620,3592,3579,3574,3566,3560,3559,3558,3550,3547,3533,3517,3516,3490,3483,3481,3463,3459,3435,3413,3412,3387,3377,3348,3341,3309,3301,3294,3286,3269,3260,3252,3225,3221,3221,3220,3218,3209,3190,3189,3177,3175,3153,3145,3140,3138,3131,3122,3114,3103,3100,3100,3087,3073,3068,3056,3051,3051,3047,3038,3036,3033,3005,2999,2994,2985,2976,2945,2930,2926,2904,2899,2854,2847,2824,2812,2812,2810,2809,2748,2743,2737,2731,2723,2721,2714,2701,2698,2695,2691,2676,2675,2670,2660,2658,2658,2654,2643,2642,2629,2615,2613,2589,2584,2582,2579,2554,2554,2534,2489,2477,2477,2471,2459,2450,2450,2426,2417,2415,2403,2386,2383,2382,2379,2376,2372,2371,2361,2354,2350,2330,2327,2309,2307,2294,2281,2263,2255,2253,2242,2222,2196,2191,2187,2182,2181,2176,2164,2152,2140,2133,2132,2118,2091,2079,2070,2064,2034,2014,1994,1987,1977,1970,1968,1963,1961,1957,1954,1946,1938,1918,1916,1898,1890,1883,1871,1864,1859,1853,1850,1829,1812,1811,1797,1784,1755,1746,1745,1734,1727,1721,1716,1706,1694,1690,1687,1653,1643,1635,1593,1570,1563,1551,1527,1499,1496,1494,1490,1486,1483,1473,1467,1459,1457,1455,1451,1448,1446,1437,1437,1435,1422,1417,1412,1406,1404,1400,1398,1380,1350,1315,1305,1297,1296,1291,1286,1276,1275,1250,1248,1224,1216,1214,1192,1187,1162,1161,1155,1146,1142,1136,1129,1128,1120,1106,1094,1084,1063,1025,1004,994,965,964,950,925,918,896,888,888,877,876,863,861,825,820,805,741,737,723,715,715,714,707,696,689,672,661,655,648,644,642,639,638,624,606,605,594,590,589,580,574,574,565,564,553,547,542,535,533,490,487,480,466,463,444,441,441,427,423,407,391,354,342,329,325,322,310,307,306,303,292,290,288,287,273,267,254,174,170,164,163,155,134,120,108,106,90,84,80,54,50,48,44,44,16,11,8,2,2";

        Assert.assertEquals(expect, sb.toString());
    }
}
